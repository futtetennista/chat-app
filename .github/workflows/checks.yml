name: checks

on:
  push:
  workflow_dispatch:

concurrency:
  group: '${{ github.workflow }} @ ${{ github.ref }}'
  cancel-in-progress: true

permissions:
  actions: read
  contents: read
  packages: read

jobs:
  backend-compile:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repo
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - uses: ./.github/actions/setup-nodejs-pnpm
        name: Set up node.js with pnpm
      - name: Run type checker
        working-directory: ./packages/backend
        run: pnpm tsc -b -v
  frontend-compile:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repo
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - uses: ./.github/actions/setup-nodejs-pnpm
        name: Set up node.js with pnpm
      - name: Run type checker
        working-directory: ./packages/frontend
        run: |
          pnpm compile:before dev
          pnpm tsc -b -v
  frontend-build:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - uses: ./.github/actions/setup-nodejs-pnpm
        name: Set up node.js with pnpm
      - name: Build frontend
        working-directory: ./packages/frontend
        run: pnpm run build
        env:
          REACT_APP_API_BASE_URL: http://localhost
      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@4a13e500e55cf31b7a5d59a38ab2040ab0f42f56 # v5.1.0
        with:
          context: ./packages/frontend/
          file: ./packages/frontend/ci/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/frontend-app:${{ github.sha }},ghcr.io/${{ github.repository }}/frontend-app:${{ github.ref_name }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}/frontend-app:main
          cache-to: type=inline
  frontend-test-e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    # needs: frontend-build
    services:
      frontend-app:
        image: ghcr.io/${{ github.repository }}/frontend-app:main
        # image: ghcr.io/${{ github.repository }}/frontend-app:${{ github.sha }}
        ports:
          - 8080:8080
    steps:
      - name: Checkout repo
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - uses: ./.github/actions/setup-nodejs-pnpm
        name: Set up node.js with pnpm
      - name: Restore Playwright browser binaries
        id: restore-playwright-browsers-binaries
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ github.workspace }}/ms-playwright-browsers
          key: ms-playwright-browsers-cache-${{ runner.os }}
      - name: Install Playwright without browsers
        working-directory: ./packages/frontend
        if: ${{ steps.restore-playwright-browsers-binaries.outputs.cache-hit == 'true' }}
        run: pnpm playwright install-deps
        env:
          PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/ms-playwright-browsers
      - name: Install Playwright with browsers
        if: ${{ steps.restore-playwright-browsers-binaries.outputs.cache-hit != 'true' }}
        working-directory: ./packages/frontend
        run: pnpm playwright install --with-deps
        env:
          PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/ms-playwright-browsers
      - name: Cache Playwright browser binaries
        uses: actions/cache/save@v4
        with:
          key: ${{ steps.restore-playwright-browsers-binaries.outputs.cache-primary-key }}
          path: |
            ${{ github.workspace }}/ms-playwright-browsers
      - name: Run Playwright tests
        working-directory: ./packages/frontend
        run: pnpm playwright test --config=playwright.config.ts
        env:
          PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/ms-playwright-browsers
          REACT_APP_API_BASE_URL: http://localhost
          REACT_APP_PORT: 8080
          # REACT_APP_HOST: frontend-app
      - name: Upload Playwright report
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        if: ${{ ! cancelled() }}
        with:
          name: playwright-report
          path: ./playwright-report/
          retention-days: 7
      # https://playwright.dev/docs/ci#on-deployment

  project-lint:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - uses: ./.github/actions/setup-nodejs-pnpm
        name: Set up node.js with pnpm
        with:
          install-recursive: false
      - name: Run linter
        id: run-linter
        run: pnpm run lint --fix
      - name: Commit and push fixed files
        uses: EndBug/add-and-commit@a94899bca583c204427a224a7af87c02f9b325d5 # v9.1.4
        if: steps.run-linter.outcome == 'failure' && github.event_name == 'pull_request'
        with:
          add: .
          message: Fix eslint issues

  project-test-unit:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repo
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - uses: ./.github/actions/setup-nodejs-pnpm
        name: Set up node.js with pnpm
      - name: Run tests
        run: pnpm recursive run test

  project-knip:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - id: checkout-repo
        name: Checkout repo
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - uses: ./.github/actions/setup-nodejs-pnpm
        name: Set up node.js with pnpm
        with:
          install-recursive: false
      - name: Knip code
        run: pnpm run knip
